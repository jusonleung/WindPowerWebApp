@using AntDesign.Charts
@using Title = AntDesign.Charts.Title

<Tabs>
    <TabPane Key="1">
        <TabTemplate>Voltage</TabTemplate>
        <ChildContent>
            <h3>Wind Turbine Voltage</h3>
            <AntDesign.Charts.Line Data="smoothedDataModels" Config="voltageConfig" />
        </ChildContent>
    </TabPane>
    <TabPane Key="2">
        <TabTemplate>Current</TabTemplate>
        <ChildContent>
            <h3>Wind Turbine Current</h3>
            <AntDesign.Charts.Line Data="smoothedDataModels" Config="currentConfig" />
        </ChildContent>
    </TabPane>
    <TabPane Key="3">
        <TabTemplate>Power</TabTemplate>
        <ChildContent>
            <h3>Wind Turbine Power</h3>
            <AntDesign.Charts.Line Data="smoothedDataModels" Config="powerConfig" />
        </ChildContent>
    </TabPane>
</Tabs>

@code {
    List<DataModel> SmoothIntervals(List<DataModel> dataList, int intervalSeconds)
    {
        return dataList
            .GroupBy(d => new DateTime(d.DateTime.Year, d.DateTime.Month, d.DateTime.Day, d.DateTime.Hour, d.DateTime.Minute, d.DateTime.Second / 30 * 30))
            .Select(g => new DataModel()
                {
                    DateTime = g.Key,
                    Voltage = g.Average(d => d.Voltage),
                    Current = g.Average(d => d.Current),
                    RPM = g.Average(d => d.RPM),
                    WindSpeed = g.Average(d => d.WindSpeed)
                })
            .ToList();
    }

    List<DataModel> FillInMissingIntervals(List<DataModel> dataList, int intervalSeconds)
    {
        TimeSpan interval = TimeSpan.FromSeconds(intervalSeconds);
        var result = new List<DataModel>();

        if (dataList == null || dataList.Count == 0)
        {
            return result;
        }

        // Sort the input list by date/time
        dataList.Sort((a, b) => a.DateTime.CompareTo(b.DateTime));

        // Determine the start and end times for the data
        DateTime startTime = dataList[0].DateTime;
        DateTime endTime = dataList[dataList.Count - 1].DateTime;

        // Iterate over the time range in intervals, filling in missing data as necessary
        DateTime currentTime = startTime;
        while (currentTime <= endTime)
        {
            // Find the first data point that is equal to or greater than the current time
            int index = dataList.FindIndex(x => x.DateTime >= currentTime);

            // If there is a data point at this time, add it to the result list
            if (index >= 0 && index < dataList.Count && dataList[index].DateTime == currentTime)
            {
                result.Add(dataList[index]);
            }
            // If there is no data point at this time, interpolate a value between the nearest data points
            else
            {
                int indexBefore = dataList.FindLastIndex(x => x.DateTime < currentTime);
                int indexAfter = dataList.FindIndex(indexBefore + 1, x => x.DateTime > currentTime);

                if (indexBefore >= 0 && indexBefore < dataList.Count && indexAfter >= 0 && indexAfter < dataList.Count)
                {
                    // Interpolate a value between the nearest data points
                    float fraction = (float)(currentTime - dataList[indexBefore].DateTime).TotalSeconds / (float)(dataList[indexAfter].DateTime - dataList[indexBefore].DateTime).TotalSeconds;
                    float voltage = dataList[indexBefore].Voltage.Value + fraction * (dataList[indexAfter].Voltage.Value - dataList[indexBefore].Voltage.Value);
                    float current = dataList[indexBefore].Current.Value + fraction * (dataList[indexAfter].Current.Value - dataList[indexBefore].Current.Value);
                    float rpm = dataList[indexBefore].RPM.Value + fraction * (dataList[indexAfter].RPM.Value - dataList[indexBefore].RPM.Value);
                    float windSpeed = dataList[indexBefore].WindSpeed.Value + fraction * (dataList[indexAfter].WindSpeed.Value - dataList[indexBefore].WindSpeed.Value);

                    result.Add(new DataModel { DateTime = currentTime, Voltage = voltage, Current = current, RPM = rpm, WindSpeed = windSpeed });
                }
                else if (indexBefore >= 0 && indexBefore < dataList.Count)
                {
                    // Use the nearest data point as a fill-in value
                    result.Add(dataList[indexBefore]);
                }
                else if (indexAfter >= 0 && indexAfter < dataList.Count)
                {
                    // Use the nearest data point as a fill-in value
                    result.Add(dataList[indexAfter]);
                }
            }

            // Advance to the next interval
            currentTime = currentTime.Add(interval);
        }

        return result;
    }

    [Parameter]
    public List<DataModel> WindTurbineData { get; set; }

    List<DataModelForChart> smoothedDataModels = new List<DataModelForChart>();

    const int interval = 30;

    protected override void OnInitialized()
    {
        smoothedDataModels = FillInMissingIntervals(SmoothIntervals(WindTurbineData, interval), interval).Select(d => new DataModelForChart(d)).ToList();
    }

    #region Voltage

    object[] voltageData;

    LineConfig voltageConfig = new LineConfig
        {
            Padding = "auto",
            ForceFit = true,
            XField = "dateTimeStr",
            YField = "voltage",
        };

    #endregion Voltage


    #region Current
    LineConfig currentConfig = new LineConfig
        {
            ForceFit = true,
            Padding = "auto",
            XField = "dateTimeStr",
            YField = "current",
        };

    #endregion Current

    #region Power
    LineConfig powerConfig = new LineConfig
        {
            Padding = "auto",
            ForceFit = true,
            XField = "dateTimeStr",
            YField = "power",
        };

    #endregion Power


}
