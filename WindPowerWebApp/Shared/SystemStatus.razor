@inject SqlDbService sqlDbService
@inject SystemControlService systemControlService

<Descriptions Title="Latest Status" Bordered Size="small">
    <DescriptionsItem Title="Status" Span="1">
        @if (Status.Online.GetValueOrDefault())
        {
            <Badge Status="@BadgeStatus.Processing" Text="Running"></Badge>
        }
        else
        {
            <Badge Status="@BadgeStatus.Default" Text="Off"></Badge>
        }
    </DescriptionsItem>
    <DescriptionsItem Title="DateTime" Span="2">@Status.SystemData.DateTime.ToString("yyyy-MM-dd HH:mm:ss")</DescriptionsItem>

    <DescriptionsItem Title="Sending" Span="1">
        @if (Status.Sending.GetValueOrDefault())
        {
            <Badge Status="@BadgeStatus.Processing" Text="Sending"></Badge>
        }
        else
        {
            <Badge Status="@BadgeStatus.Default" Text="Off"></Badge>
        }
    </DescriptionsItem>
    <DescriptionsItem Title="Interval" Span="2">
        @if (Status.Interval == null)
        {
            <div>-</div>
        }
        else
        {
            <div>@Status.Interval s</div>
        }
    </DescriptionsItem>

    <DescriptionsItem Title="RPM">@Status.SystemData.NullorAddUnit(Status.SystemData.RPM,"")</DescriptionsItem>
    <DescriptionsItem Title="Wind Speed">@Status.SystemData.NullorAddUnit(Status.SystemData.WindSpeed," m/s")</DescriptionsItem>
</Descriptions>
<h6 style="margin-top:10px">Generater</h6>
<Descriptions Bordered Size="small">
    <DescriptionsItem Title="Voltage">@Status.SystemData.NullorAddUnit(Status.SystemData.Voltage_generator," V")</DescriptionsItem>
    <DescriptionsItem Title="Current">@Status.SystemData.NullorAddUnit(Status.SystemData.Current_generator," A")</DescriptionsItem>
    <DescriptionsItem Title="Power">@Status.SystemData.NullorAddUnit(Status.SystemData.Voltage_generator*Status.SystemData.Current_generator," W")</DescriptionsItem>
</Descriptions>
<h6 style="margin-top:10px">Battery</h6>
<Descriptions Bordered Size="small">
    <DescriptionsItem Title="Voltage">@Status.SystemData.NullorAddUnit(Status.SystemData.Voltage_battery," V")</DescriptionsItem>
    <DescriptionsItem Title="Current">@Status.SystemData.NullorAddUnit(Status.SystemData.Current_battery," A")</DescriptionsItem>
    <DescriptionsItem Title="Power">@Status.SystemData.NullorAddUnit(Status.SystemData.Voltage_battery*Status.SystemData.Current_battery," W")</DescriptionsItem>
</Descriptions>

@code {
    int onlineCheckCount = 0;
    static System.Timers.Timer _timer;

    [Parameter]
    public RpiStatusModel Status { get; set; }
    [Parameter]
    public EventCallback<RpiStatusModel> StatusChanged { get; set; }


    HttpClient client = new HttpClient();

    protected async override void OnInitialized()
    {
        Status = new RpiStatusModel { SystemData = sqlDbService.GetLatestSystemData() };
        _timer = new System.Timers.Timer(3000);
        _timer.Elapsed += RefreshStatus;
        await RefreshStatus();
        _timer.Enabled = true;
    }

    async void RefreshStatus(Object source, System.Timers.ElapsedEventArgs e)
    {
        await RefreshStatus();
    }

    async Task RefreshStatus()
    {
        var rpi_res = await systemControlService.PingAsync();
        if (rpi_res == null)
        {
            //rpi is offline
            Status.Online = false;
            Status.Sending = false;
            _timer.Interval = 10000;
            var newdata = sqlDbService.GetLatestSystemData();
            if (Status.SystemData == null || Status.SystemData.DateTime < newdata.DateTime)
            {
                Status = new RpiStatusModel { SystemData = newdata };
            }
        }
        else
        {
            //rpi is online
            Status = rpi_res;
            _timer.Interval = 3000;
        }

        await InvokeAsync(async () =>
        {
            await StatusChanged.InvokeAsync(Status);
            StateHasChanged();
        });
    }
}