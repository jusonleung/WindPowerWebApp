@inject SqlDbService sqlDbService
@inject NavigationManager NavigationManager

<Descriptions Title="Lastest Status" Bordered Size="small">
    <DescriptionsItem Title="Status" Span="1">
        @if (isOnline)
        {
            <Badge Status="@BadgeStatus.Processing" Text="Running"></Badge>
        }
        else
        {
            <Badge Status="@BadgeStatus.Default" Text="Off"></Badge>
        }
    </DescriptionsItem>
    <DescriptionsItem Title="DateTime" Span="2">@data.DateTime.ToString("yyyy-MM-dd HH:mm:ss")</DescriptionsItem>
    <DescriptionsItem Title="RPM">@data.NullorAddUnit(data.RPM,"")</DescriptionsItem>
    <DescriptionsItem Title="Wind Speed">@data.NullorAddUnit(data.WindSpeed," m/s")</DescriptionsItem>
</Descriptions>
<h6 style="margin-top:10px">Generater</h6>
<Descriptions Bordered Size="small">
    <DescriptionsItem Title="Voltage">@data.NullorAddUnit(data.Voltage_generator," V")</DescriptionsItem>
    <DescriptionsItem Title="Current">@data.NullorAddUnit(data.Current_generator," A")</DescriptionsItem>
    <DescriptionsItem Title="Power">@data.NullorAddUnit(data.Voltage_generator*data.Current_generator," W")</DescriptionsItem>
</Descriptions>
<h6 style="margin-top:10px">Inverter</h6>
<Descriptions Bordered Size="small">
    <DescriptionsItem Title="Voltage">@data.NullorAddUnit(data.Voltage_inverter," V")</DescriptionsItem>
    <DescriptionsItem Title="Current">@data.NullorAddUnit(data.Current_inverter," A")</DescriptionsItem>
    <DescriptionsItem Title="Power">@data.NullorAddUnit(data.Voltage_inverter*data.Current_inverter," W")</DescriptionsItem>
</Descriptions>

@code {
    bool isOnline;
    int onlineCheckCount = 0;
    DataModel data;
    static System.Timers.Timer _timer;

    protected async override void OnInitialized()
    {
        data = sqlDbService.GetLatestSystemData();
        _timer = new System.Timers.Timer(2000);
        _timer.Elapsed += RefreshStatus;
        _timer.Enabled = true;
    }

    public async void RefreshStatus(Object source, System.Timers.ElapsedEventArgs e)
    {
        var newdata = sqlDbService.GetLatestSystemData();
        if (data.DateTime == newdata.DateTime)
            onlineCheckCount++;
        else
        {
            data = newdata;
            isOnline = true;
            onlineCheckCount = 0;
        }

        if (onlineCheckCount >= 5)
        {
            onlineCheckCount = 0;
            isOnline = false;
        }

        await InvokeAsync(async () =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    readonly GaugeConfig config1 = new GaugeConfig
        {
            Width = 400,
            Height = 400,
            Percent = 64,
            Range = new double[] { 0, 25, 50, 75, 100 },
        };
}