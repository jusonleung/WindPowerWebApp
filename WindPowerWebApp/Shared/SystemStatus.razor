@inject SqlDbService sqlDbService
@inject NavigationManager NavigationManager

@if (isOnline)
{
    <Descriptions Title="Current status" Bordered>
        <DescriptionsItem Title="Status" Span="1">
            <span style="color:green"><a style="font-size:large">●</a> online</span>
        </DescriptionsItem>
        <DescriptionsItem Title="DateTime" Span="2">@data.DateTime.ToString("yyyy-MM-dd HH:mm:ss")</DescriptionsItem>
        <DescriptionsItem Title="Voltage">@data.NullorAddUnit(data.Voltage,"V")</DescriptionsItem>
        <DescriptionsItem Title="Current">@data.NullorAddUnit(data.Current,"A")</DescriptionsItem>
        <DescriptionsItem Title="Power">@data.NullorAddUnit(data.Voltage*data.Current,"W")</DescriptionsItem>
        <DescriptionsItem Title="RPM">@data.NullorAddUnit(data.Voltage,"rpm")</DescriptionsItem>
        <DescriptionsItem Title="Wind Speed">@data.NullorAddUnit(data.Voltage,"m/s")</DescriptionsItem>
    </Descriptions>
}
else
{
    <Descriptions Title="Current status" Bordered>
        <DescriptionsItem Title="Status" Span="1">
            <span style="color:red">● offline</span>
        </DescriptionsItem>
    </Descriptions>
}

<br />

<div style="height:500px">
    <GoogleMap @ref="@map1" Id="map1" Options="@mapOptions" Height="100%"></GoogleMap>
</div>

@code {

    private GoogleMap map1;
    private MapOptions mapOptions;
    Marker marker;
    LatLngLiteral position;

    bool isOnline;
    int onlineCheckCount = 0;
    DataModel data;
    static System.Timers.Timer _timer;

    protected async override void OnInitialized()
    {
        data = sqlDbService.GetLatestSystemData();
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += RefreshStatus;
        _timer.Enabled = true;

        position = new LatLngLiteral()
            {
                Lat = 22.302711,
                Lng = 114.177216
            };

        mapOptions = new MapOptions()
            {
                Zoom = 15,
                Center = position,
                MapTypeId = MapTypeId.Roadmap
            };
    }



    public async void RefreshStatus(Object source, System.Timers.ElapsedEventArgs e)
    {
        var newdata = sqlDbService.GetLatestSystemData();
        if (data.DateTime == newdata.DateTime)
            onlineCheckCount++;
        else
        {
            data = newdata;
            isOnline = true;
            onlineCheckCount = 0;
        }

        if (onlineCheckCount >= 5)
        {
            onlineCheckCount = 0;
            isOnline = false;
        }

        position.Lat = data.Latitude.Value;
        position.Lng = data.Longitude.Value;

        try
        {
            if (marker == null)
                marker = await Marker.CreateAsync(map1.JsRuntime, new MarkerOptions()
                    {
                        Position = position,
                        Map = map1.InteropObject
                    });
            else
                marker.SetPosition(position);
        }
        catch (JSDisconnectedException ex)
        {
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }

        await InvokeAsync(async () =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

}

