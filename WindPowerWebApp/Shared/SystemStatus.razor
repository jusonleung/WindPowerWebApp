@inject SqlDbService sqlDbService
@inject NavigationManager NavigationManager

<Descriptions Title="Latest status" Bordered>
    <DescriptionsItem Title="Status" Span="1">
        @if (isOnline)
        {
            <span style="color:green"><a style="font-size:large">●</a> online</span>
        }
        else
        {
            <span style="color:red">● offline</span>
        }
    </DescriptionsItem>
    <DescriptionsItem Title="DateTime" Span="2">@data.DateTime.ToString("yyyy-MM-dd HH:mm:ss")</DescriptionsItem>
    <DescriptionsItem Title="Voltage">@data.NullorAddUnit(data.Voltage,"V")</DescriptionsItem>
    <DescriptionsItem Title="Current">@data.NullorAddUnit(data.Current,"A")</DescriptionsItem>
    <DescriptionsItem Title="Power">@data.NullorAddUnit(data.Voltage*data.Current,"W")</DescriptionsItem>
    <DescriptionsItem Title="RPM">@data.NullorAddUnit(data.RPM,"rpm")</DescriptionsItem>
    <DescriptionsItem Title="Wind Speed">@data.NullorAddUnit(data.WindSpeed,"m/s")</DescriptionsItem>
</Descriptions>

@code {
    bool isOnline;
    int onlineCheckCount = 0;
    DataModel data;
    static System.Timers.Timer _timer;

    protected async override void OnInitialized()
    {
        data = sqlDbService.GetLatestSystemData();
        _timer = new System.Timers.Timer(2000);
        _timer.Elapsed += RefreshStatus;
        _timer.Enabled = true;
    }

    public async void RefreshStatus(Object source, System.Timers.ElapsedEventArgs e)
    {
        var newdata = sqlDbService.GetLatestSystemData();
        if (data.DateTime == newdata.DateTime)
            onlineCheckCount++;
        else
        {
            data = newdata;
            isOnline = true;
            onlineCheckCount = 0;
        }

        if (onlineCheckCount >= 5)
        {
            onlineCheckCount = 0;
            isOnline = false;
        }

        await InvokeAsync(async () =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

}



@*@inject SqlDbService sqlDbService
@inject SystemControlService systemControlService
@inject NavigationManager NavigationManager

<Descriptions Title="Latest status" Bordered>
    <DescriptionsItem Title="Online">
        @if (_isOnline)
        {
            <span style="color:green"><a style="font-size:large">●</a></span>
        }
        else
        {
            <span style="color:red"><a style="font-size:large">●</a></span>
        }
    </DescriptionsItem>
    <DescriptionsItem Title="Running">
        <Switch CheckedChildren="On" UnCheckedChildren="Off" Checked="@_isRunning" Loading="@_isLoading" Disabled="@(!_isOnline)" Control OnClick="SystemOnOff" />
    </DescriptionsItem>
    <DescriptionsItem Title="DateTime">@data.DateTime.ToString("yyyy-MM-dd HH:mm:ss")</DescriptionsItem>
    <DescriptionsItem Title="Voltage">@data.NullorAddUnit(data.Voltage,"V")</DescriptionsItem>
    <DescriptionsItem Title="Current">@data.NullorAddUnit(data.Current,"A")</DescriptionsItem>
    <DescriptionsItem Title="Power">@data.NullorAddUnit(data.Voltage*data.Current,"W")</DescriptionsItem>
    <DescriptionsItem Title="RPM">@data.NullorAddUnit(data.RPM,"rpm")</DescriptionsItem>
    <DescriptionsItem Title="Wind Speed">@data.NullorAddUnit(data.WindSpeed,"m/s")</DescriptionsItem>
</Descriptions>

@code {

    bool _isOnline;
    bool _isRunning;
    bool _isLoading = false;
    DataModel data;
    static System.Timers.Timer _timer;
    static System.Timers.Timer _pinger;

    protected async override void OnInitialized()
    {
        data = sqlDbService.GetLatestSystemData();
        await PingRpi();
        _pinger = new System.Timers.Timer(60000);
        _pinger.Elapsed += PingRpiTimer;
        _pinger.Enabled = true;

        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += RefreshStatus;
        _timer.Enabled = true;
    }

    async void PingRpiTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        await PingRpi();
    }

    async Task PingRpi()
    {
        bool? running = await systemControlService.PingAsync();
        if (running == null)
        {
            _isOnline = false;
            return;
        }
        _isOnline = true;
        _isRunning = running.Value;
        await InvokeAsync(async () =>
            {
                StateHasChanged();
            });
    }

    async Task SystemOnOff()
    {
        _isRunning = !_isRunning;
        _isLoading = true;
        var success = await systemControlService.SystemOnOffAsync(_isRunning);
        if (!success)
        {
            _isRunning = !_isRunning;
        }
        _isLoading = false;
    }

    async void RefreshStatus(Object source, System.Timers.ElapsedEventArgs e)
    {
        var _data = sqlDbService.GetLatestSystemData();
        if (_data != null && _data.DateTime > data.DateTime)
        {
            data = _data;
            await InvokeAsync(async () =>
            {
                StateHasChanged();
            });
        }
    }

    void Dispose()
    {
        _pinger?.Dispose();
        _timer?.Dispose();
    }

}*@

