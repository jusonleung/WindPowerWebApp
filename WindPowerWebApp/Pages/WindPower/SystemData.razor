@inject SqlDbService sqlDbService
@inject ExcelService excelService
@inject Microsoft.JSInterop.IJSRuntime JS

@page "/system-data"

<GridRow>
    <GridCol Span="6">
        <Button Type="@ButtonType.Primary" OnClick="CreateExcel" Icon="@IconType.Outline.Download" Shape="@ButtonShape.Round">Download</Button>
    </GridCol>
    <GridCol Span="6">
        <RangePicker TValue="DateTime?[]" ShowTime='@("HH:mm")' AllowClear=true @bind-Value="@RangePicker" DisabledDate="date => date < Data.First().DateTime.AddDays(-1) || date > DateTime.Now" />
        <Button Type="@ButtonType.Primary" OnClick="OnClickSubmit">Submit</Button>
    </GridCol>
</GridRow>



<br />
<br />
<Table TItem="DataModel"
       DataSource="@Data"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize">
    <PropertyColumn Property="c=>c.DateTime" Sortable Format="yyyy-MM-dd HH:mm:ss"/>
    <PropertyColumn Title="Voltage" Property="c=>c.Voltage" Sortable>
        <CellRender Context="cell">@(cell.FieldValue == default ? "--" : cell.FieldValue.ToString()+'V')</CellRender>
    </PropertyColumn>
    <PropertyColumn Title="Current" Property="c=>c.Current" Sortable>
        <CellRender Context="cell">@(cell.FieldValue == default ? "--" : cell.FieldValue.ToString()+'A')</CellRender>
    </PropertyColumn>
    <PropertyColumn Title="Power" Property="c=>c.Current*c.Voltage" Sortable>
        <CellRender Context="cell">@(cell.FieldValue == default ? "--" : cell.FieldValue.ToString()+'W')</CellRender>
    </PropertyColumn>
    <PropertyColumn Title="Revolutions per minute" Property="c=>c.RPM" Sortable>
        <CellRender Context="cell">@(cell.FieldValue == default ? "--" : cell.FieldValue.ToString()+"rpm")</CellRender>
    </PropertyColumn>
    <PropertyColumn Title="WindSpeed" Property="c=>c.WindSpeed" Sortable>
        <CellRender Context="cell">@(cell.FieldValue == default ? "--" : cell.FieldValue.ToString()+"m/s")</CellRender>
    </PropertyColumn>
</Table>

@code {
    List<DataModel> Data;

    int _pageIndex = 1;
    int _pageSize = 20;
    int _total = 0;

    DateTime?[] RangePicker = new DateTime?[2];

    protected override void OnInitialized()
    {
        Data = sqlDbService.GetAllSystemData();
        RangePicker[0] = Data.FirstOrDefault().DateTime;
        RangePicker[1] = Data.LastOrDefault().DateTime;
        _total = Data.Count;
    }

    MemoryStream excelStream;

    /// <summary>
    /// Create and download the Excel document.
    /// </summary>
    protected async void CreateExcel()
    {
        excelStream = excelService.CreateExcel(Data);
        await JS.SaveAs("SystemData.xlsx", excelStream.ToArray());
    }

    void OnClickSubmit()
    {
        DateTime endTime = RangePicker.LastOrDefault() ?? DateTime.Now; // if RangePicker.Last is null, use DateTime.Now as end time
        DateTime startTime = RangePicker.FirstOrDefault().GetValueOrDefault(); // use the first value as start time
        Data = sqlDbService.GetAllSystemData(startTime, endTime);
        _total = Data.Count;
    }
}
