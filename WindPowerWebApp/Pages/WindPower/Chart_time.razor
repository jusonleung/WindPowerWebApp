@inject SqlDbService sqlDbService
@inject NavigationManager NavManager

@page "/chart/time"

<PageTitle>Chart over Time</PageTitle>

<RangePicker TValue="DateTime?[]" ShowTime='@("HH:mm")' AllowClear=true Value="@RangePicker" DisabledDate="date => date < SelectedData.First().DateTime.AddDays(-1) || date > DateTime.Now" />
<Text style="margin-left:15px">Interval:</Text>
<AntDesign.InputNumber @bind-Value="interval" Formatter="Format" Min="1"></AntDesign.InputNumber>
<Button Type="@ButtonType.Primary" OnClick="OnClickSubmit" Style="margin-left:15px;">Submit</Button>


<Tabs>
    @foreach (var c in charts)
    {
        <TabPane Key="@c.Title">
            <TabTemplate>@c.Title</TabTemplate>
            <ChildContent>
                <Line Data="SelectedData" Config="c.Config" @ref="c.ChartComponent" />
            </ChildContent>
        </TabPane>
    }
</Tabs>

@code {
    List<DataModelForChart> SelectedData;
    List<DataModel> RawData;

    DateTime?[] RangePicker = new DateTime?[2];
    int interval = 30;

    class LineChartComponents
    {
        public PropertyInfo Prop;
        public string Title;
        public IChartComponent ChartComponent;
        public LineConfig Config;

        public LineChartComponents(PropertyInfo prop, string against = "dateTimeStr")
        {
            Prop = prop;
            Title = ((DisplayNameAttribute)prop.GetCustomAttributes(typeof(DisplayNameAttribute), true).FirstOrDefault() ?? new DisplayNameAttribute(prop.Name)).DisplayName;
            Config = new LineConfig
                {
                    AutoFit = true,
                    Padding = "auto",
                    XField = against,
                    YField = prop.Name == "WindSpeed" ? "windSpeed" : prop.Name.ToLower(),
                    Slider = new Slider
                    {
                        Start = 0,
                        End = 1
                    }
                };
        }
    }

    LineChartComponents[] charts;

    private string Format(int value)
    {
        return value.ToString() + " s";
    }

    protected override void OnInitialized()
    {
        RawData = sqlDbService.GetAllSystemData().Where(d => d.Current_generator != null && d.Current_inverter != null && d.Voltage_generator != null && d.Voltage_inverter != null && d.RPM != null && d.WindSpeed != null).ToList();
        SelectedData = SplitAndSmoothDataList(RawData, interval).Select(d => new DataModelForChart(d)).ToList();
        RangePicker[0] = SelectedData.FirstOrDefault().DateTime;
        RangePicker[1] = SelectedData.LastOrDefault().DateTime;
        charts = typeof(DataModelForChart).GetProperties().Where(p => p.PropertyType == typeof(float?)).Select(p => new LineChartComponents(p)).ToArray();
    }

    async void OnClickSubmit()
    {
        DateTime endTime = RangePicker.LastOrDefault() ?? DateTime.Now; // if RangePicker.Last is null, use DateTime.Now as end time
        DateTime startTime = RangePicker.FirstOrDefault().GetValueOrDefault(); // use the first value as start time
        SelectedData = SplitAndSmoothDataList(RawData.Where(d => d.DateTime >= startTime && d.DateTime <= endTime).ToList(), interval).Select(d => new DataModelForChart(d)).ToList();
        foreach (var chart in charts.Select(s => s.ChartComponent))
            if (chart != null)
                await chart.ChangeData(SelectedData);
    }

    List<DataModel> SmoothDataList(List<DataModel> dataList, int intervalSeconds)
    {
        dataList = dataList
            .GroupBy(d => new DateTime(d.DateTime.Year, d.DateTime.Month, d.DateTime.Day, d.DateTime.Hour, d.DateTime.Minute, d.DateTime.Second / 30 * 30))
            .Select(g => new DataModel()
                {
                    DateTime = g.Key,
                    Voltage_generator = g.Average(d => d.Voltage_generator),
                    Current_generator = g.Average(d => d.Current_generator),
                    Voltage_inverter = g.Average(d => d.Voltage_inverter),
                    Current_inverter = g.Average(d => d.Current_inverter),
                    RPM = g.Average(d => d.RPM),
                    WindSpeed = g.Average(d => d.WindSpeed)
                })
            .ToList();

        TimeSpan interval = TimeSpan.FromSeconds(intervalSeconds);
        var result = new List<DataModel>();

        if (dataList == null || dataList.Count == 0)
        {
            return result;
        }

        // Sort the input list by date/time
        dataList.Sort((a, b) => a.DateTime.CompareTo(b.DateTime));

        // Determine the start and end times for the data
        DateTime startTime = dataList[0].DateTime;
        DateTime endTime = dataList[dataList.Count - 1].DateTime;

        // Iterate over the time range in intervals, filling in missing data as necessary
        DateTime currentTime = startTime;
        while (currentTime <= endTime)
        {
            // Find the first data point that is equal to or greater than the current time
            int index = dataList.FindIndex(x => x.DateTime >= currentTime);

            // If there is a data point at this time, add it to the result list
            if (index >= 0 && index < dataList.Count && dataList[index].DateTime == currentTime)
            {
                result.Add(dataList[index]);
            }
            // If there is no data point at this time, interpolate a value between the nearest data points
            else
            {
                int indexBefore = dataList.FindLastIndex(x => x.DateTime < currentTime);
                int indexAfter = dataList.FindIndex(indexBefore + 1, x => x.DateTime > currentTime);

                if (indexBefore >= 0 && indexBefore < dataList.Count && indexAfter >= 0 && indexAfter < dataList.Count)
                {
                    // Interpolate a value between the nearest data points
                    float fraction = (float)(currentTime - dataList[indexBefore].DateTime).TotalSeconds / (float)(dataList[indexAfter].DateTime - dataList[indexBefore].DateTime).TotalSeconds;

                    float voltage_generator = dataList[indexBefore].Voltage_generator.Value + fraction * (dataList[indexAfter].Voltage_generator.Value - dataList[indexBefore].Voltage_generator.Value);
                    float current_generator = dataList[indexBefore].Current_generator.Value + fraction * (dataList[indexAfter].Current_generator.Value - dataList[indexBefore].Current_generator.Value);

                    float voltage_inverter = dataList[indexBefore].Voltage_inverter.Value + fraction * (dataList[indexAfter].Voltage_inverter.Value - dataList[indexBefore].Voltage_inverter.Value);
                    float current_inverter = dataList[indexBefore].Current_inverter.Value + fraction * (dataList[indexAfter].Current_inverter.Value - dataList[indexBefore].Current_inverter.Value);

                    float rpm = dataList[indexBefore].RPM.Value + fraction * (dataList[indexAfter].RPM.Value - dataList[indexBefore].RPM.Value);
                    float windSpeed = dataList[indexBefore].WindSpeed.Value + fraction * (dataList[indexAfter].WindSpeed.Value - dataList[indexBefore].WindSpeed.Value);

                    result.Add(new DataModel
                        {
                            DateTime = currentTime,
                            Voltage_generator = voltage_generator,
                            Current_generator = current_generator,
                            Voltage_inverter = voltage_inverter,
                            Current_inverter = current_inverter,
                            RPM = rpm,
                            WindSpeed = windSpeed
                        });
                }
                else if (indexBefore >= 0 && indexBefore < dataList.Count)
                {
                    // Use the nearest data point as a fill-in value
                    result.Add(dataList[indexBefore]);
                }
                else if (indexAfter >= 0 && indexAfter < dataList.Count)
                {
                    // Use the nearest data point as a fill-in value
                    result.Add(dataList[indexAfter]);
                }
            }

            // Advance to the next interval
            currentTime = currentTime.Add(interval);
        }

        return result;
    }

    List<List<DataModel>> SplitDataList(List<DataModel> dataList)
    {
        List<List<DataModel>> result = new List<List<DataModel>>();
        if (dataList == null || dataList.Count == 0)
        {
            return result;
        }

        int startIndex = 0;
        DateTime prevDateTime = dataList[0].DateTime;

        for (int i = 1; i < dataList.Count; i++)
        {
            DateTime currDateTime = dataList[i].DateTime;
            TimeSpan interval = currDateTime - prevDateTime;
            if (interval.TotalHours >= 2)
            {
                List<DataModel> subList = dataList.GetRange(startIndex, i - startIndex);
                result.Add(subList);
                startIndex = i;
            }
            prevDateTime = currDateTime;
        }

        // add the final sublist
        List<DataModel> finalSubList = dataList.GetRange(startIndex, dataList.Count - startIndex);
        result.Add(finalSubList);

        return result;
    }

    List<DataModel> SplitAndSmoothDataList(List<DataModel> dataList, int intervalSeconds)
    {
        var splitedData = SplitDataList(dataList);
        List<DataModel> result = new List<DataModel>();
        foreach (var d in splitedData)
        {
            result = result.Concat(SmoothDataList(d, intervalSeconds)).ToList();
        }
        return result;
    }
}