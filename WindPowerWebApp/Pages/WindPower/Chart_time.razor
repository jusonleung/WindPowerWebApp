@inject SqlDbService sqlDbService
@inject NavigationManager NavManager

@page "/chart/time"
@using Microsoft.AspNetCore.WebUtilities;

<PageTitle>Chart over Time</PageTitle>

<RangePicker TValue="DateTime?[]" ShowTime='@("HH:mm")' AllowClear=true Value="@RangePicker" DisabledDate="date => date < Data.First().DateTime.AddDays(-1) || date > DateTime.Now" />
<Text>Interval:</Text>
<AntDesign.InputNumber @bind-Value="interval" Formatter="Format" Min="1"></AntDesign.InputNumber>
<Button Type="@ButtonType.Primary" OnClick="OnClickSubmit">Submit</Button>


<Tabs>
    <TabPane Key="1">
        <TabTemplate>Generator Voltage</TabTemplate>
        <ChildContent>
            <Line Data="Data" Config="Voltage_generatorTimeConfig" @ref="@Voltage_generatorChart" />
        </ChildContent>
    </TabPane>
    <TabPane Key="2">
        <TabTemplate>Generator Current</TabTemplate>
        <ChildContent>
            <Line Data="Data" Config="Current_generatorTimeConfig" @ref="@Current_generatorChart" />
        </ChildContent>
    </TabPane>
    <TabPane Key="3">
        <TabTemplate>Generator Power</TabTemplate>
        <ChildContent>
            <Line Data="Data" Config="Power_generatorTimeConfig" @ref="@Power_generatorChart" />
        </ChildContent>
    </TabPane>
    <TabPane Key="4">
        <TabTemplate>Inverter Voltage</TabTemplate>
        <ChildContent>
            <Line Data="Data" Config="Voltage_inverterTimeConfig" @ref="@Voltage_inverterChart" />
        </ChildContent>
    </TabPane>
    <TabPane Key="5">
        <TabTemplate>Inverter Current</TabTemplate>
        <ChildContent>
            <Line Data="Data" Config="Current_inverterTimeConfig" @ref="@Current_inverterChart" />
        </ChildContent>
    </TabPane>
    <TabPane Key="6">
        <TabTemplate>Inverter Power</TabTemplate>
        <ChildContent>
            <Line Data="Data" Config="Power_inverterTimeConfig" @ref="@Power_inverterChart" />
        </ChildContent>
    </TabPane>
</Tabs>

@code {
    List<DataModelForChart> Data;

    DateTime?[] RangePicker = new DateTime?[2];

    IChartComponent Voltage_generatorChart;
    IChartComponent Current_generatorChart;
    IChartComponent Power_generatorChart;

    IChartComponent Voltage_inverterChart;
    IChartComponent Current_inverterChart;
    IChartComponent Power_inverterChart;

    int interval = 30;

    private string Format(int value)
    {
        return value.ToString() + "s";
    }

    protected override void OnInitialized()
    {
        Data = SmoothDataList(sqlDbService.GetAllSystemData(), interval).Select(d => new DataModelForChart(d)).ToList();
        RangePicker[0] = Data.FirstOrDefault().DateTime;
        RangePicker[1] = Data.LastOrDefault().DateTime;
    }

    async void OnClickSubmit()
    {
        DateTime endTime = RangePicker.LastOrDefault() ?? DateTime.Now; // if RangePicker.Last is null, use DateTime.Now as end time
        DateTime startTime = RangePicker.FirstOrDefault().GetValueOrDefault(); // use the first value as start time
        Data = SmoothDataList(sqlDbService.GetAllSystemData(startTime, endTime), interval).Select(d => new DataModelForChart(d)).ToList();
        foreach (var chart in new[] { Voltage_generatorChart, Current_generatorChart, Power_generatorChart, Voltage_inverterChart, Current_inverterChart, Power_inverterChart })
            if (chart != null)
                await chart.ChangeData(Data);
    }

    List<DataModel> SmoothDataList(List<DataModel> dataList, int intervalSeconds)
    {
        dataList = dataList
            .GroupBy(d => new DateTime(d.DateTime.Year, d.DateTime.Month, d.DateTime.Day, d.DateTime.Hour, d.DateTime.Minute, d.DateTime.Second / 30 * 30))
            .Select(g => new DataModel()
                {
                    DateTime = g.Key,
                    Voltage_generator = g.Average(d => d.Voltage_generator),
                    Current_generator = g.Average(d => d.Current_generator),
                    Voltage_inverter = g.Average(d => d.Voltage_inverter),
                    Current_inverter = g.Average(d => d.Current_inverter),
                    RPM = g.Average(d => d.RPM),
                    WindSpeed = g.Average(d => d.WindSpeed)
                })
            .ToList();

        TimeSpan interval = TimeSpan.FromSeconds(intervalSeconds);
        var result = new List<DataModel>();

        if (dataList == null || dataList.Count == 0)
        {
            return result;
        }

        // Sort the input list by date/time
        dataList.Sort((a, b) => a.DateTime.CompareTo(b.DateTime));

        // Determine the start and end times for the data
        DateTime startTime = dataList[0].DateTime;
        DateTime endTime = dataList[dataList.Count - 1].DateTime;

        // Iterate over the time range in intervals, filling in missing data as necessary
        DateTime currentTime = startTime;
        while (currentTime <= endTime)
        {
            // Find the first data point that is equal to or greater than the current time
            int index = dataList.FindIndex(x => x.DateTime >= currentTime);

            // If there is a data point at this time, add it to the result list
            if (index >= 0 && index < dataList.Count && dataList[index].DateTime == currentTime)
            {
                result.Add(dataList[index]);
            }
            // If there is no data point at this time, interpolate a value between the nearest data points
            else
            {
                int indexBefore = dataList.FindLastIndex(x => x.DateTime < currentTime);
                int indexAfter = dataList.FindIndex(indexBefore + 1, x => x.DateTime > currentTime);

                if (indexBefore >= 0 && indexBefore < dataList.Count && indexAfter >= 0 && indexAfter < dataList.Count)
                {
                    // Interpolate a value between the nearest data points
                    float fraction = (float)(currentTime - dataList[indexBefore].DateTime).TotalSeconds / (float)(dataList[indexAfter].DateTime - dataList[indexBefore].DateTime).TotalSeconds;

                    float voltage_generator = dataList[indexBefore].Voltage_generator.Value + fraction * (dataList[indexAfter].Voltage_generator.Value - dataList[indexBefore].Voltage_generator.Value);
                    float current_generator = dataList[indexBefore].Current_generator.Value + fraction * (dataList[indexAfter].Current_generator.Value - dataList[indexBefore].Current_generator.Value);

                    float voltage_inverter = dataList[indexBefore].Voltage_inverter.Value + fraction * (dataList[indexAfter].Voltage_inverter.Value - dataList[indexBefore].Voltage_inverter.Value);
                    float current_inverter = dataList[indexBefore].Current_inverter.Value + fraction * (dataList[indexAfter].Current_inverter.Value - dataList[indexBefore].Current_inverter.Value);

                    float rpm = dataList[indexBefore].RPM.Value + fraction * (dataList[indexAfter].RPM.Value - dataList[indexBefore].RPM.Value);
                    float windSpeed = dataList[indexBefore].WindSpeed.Value + fraction * (dataList[indexAfter].WindSpeed.Value - dataList[indexBefore].WindSpeed.Value);

                    result.Add(new DataModel
                        {
                            DateTime = currentTime,
                            Voltage_generator = voltage_generator,
                            Current_generator = current_generator,
                            Voltage_inverter = voltage_inverter,
                            Current_inverter = current_inverter,
                            RPM = rpm,
                            WindSpeed = windSpeed
                        });
                }
                else if (indexBefore >= 0 && indexBefore < dataList.Count)
                {
                    // Use the nearest data point as a fill-in value
                    result.Add(dataList[indexBefore]);
                }
                else if (indexAfter >= 0 && indexAfter < dataList.Count)
                {
                    // Use the nearest data point as a fill-in value
                    result.Add(dataList[indexAfter]);
                }
            }

            // Advance to the next interval
            currentTime = currentTime.Add(interval);
        }

        return result;
    }

    LineConfig Voltage_generatorTimeConfig = new LineConfig
        {
            Padding = "auto",
            AutoFit = true,
            XField = "dateTimeStr",
            YField = "voltage_generator",
        };

    LineConfig Current_generatorTimeConfig = new LineConfig
        {
            AutoFit = true,
            Padding = "auto",
            XField = "dateTimeStr",
            YField = "current_generator",
        };

    LineConfig Power_generatorTimeConfig = new LineConfig
        {
            Padding = "auto",
            AutoFit = true,
            XField = "dateTimeStr",
            YField = "power_generator"
        };

    LineConfig Voltage_inverterTimeConfig = new LineConfig
        {
            Padding = "auto",
            AutoFit = true,
            XField = "dateTimeStr",
            YField = "voltage_inverter",
        };

    LineConfig Current_inverterTimeConfig = new LineConfig
        {
            AutoFit = true,
            Padding = "auto",
            XField = "dateTimeStr",
            YField = "current_inverter",
        };

    LineConfig Power_inverterTimeConfig = new LineConfig
        {
            Padding = "auto",
            AutoFit = true,
            XField = "dateTimeStr",
            YField = "power_inverter"
        };
}
