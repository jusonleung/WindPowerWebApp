@inject SqlDbService sqlDbService
@inject SystemControlService systemControlService

@page "/system-control"

<PageTitle>SystemControl</PageTitle>


<GridRow>
    <GridCol Span="4">
        <h5 style="margin:20px">
            Sending
            <Switch CheckedChildren="On" UnCheckedChildren="Off" Checked="@Status.Sending.GetValueOrDefault()" Loading="@_isSendingLoading" OnClick="SendingSwitch" Disabled="@Status.Online.GetValueOrDefault()"/>
        </h5>
    </GridCol>
    <GridCol Span="4">
        <h5>Change interval</h5>
        <Slider Disabled="@(!Status.Sending.GetValueOrDefault())" TValue="double" Min="1" Max="60" @bind-Value="@newInterval" />
        <AntDesign.InputNumber Disabled="@(!Status.Sending.GetValueOrDefault())" Min="1" Max="60" Style="margin:0 16px;" @bind-Value="@newInterval" TValue="double" />
        <div style="margin-top: 12px;">
            <Popconfirm Placement="@Placement.Right" Title="@_title" OkText="@_okText" CancelText="@_cancelText" OnConfirm="ChangeIntervalComfirm">
                <Button Disabled="@(!Status.Sending.GetValueOrDefault())" Type="@ButtonType.Primary"
                        Loading="@_isIntervalLoading">
                    Comfirm
                </Button>
            </Popconfirm>
        </div>
    </GridCol>
</GridRow>
<Divider/>
<SystemStatus @bind-Status="Status"></SystemStatus>

@code {
    string _cancelText = "No";
    string _okText = "Yes";
    string _title = "Are you sure?";

    RpiStatusModel Status = new RpiStatusModel();

    bool _isSendingLoading = false;
    bool _isIntervalLoading;
    double newInterval;
    async Task SendingSwitch()
    {
        if (!_isSendingLoading)
        {
            _isSendingLoading = true;
            bool check;
            if (Status.Sending.GetValueOrDefault())
                check = await systemControlService.StopSendingAsync();
            else
                check = await systemControlService.StartSendingAsync();
            if (check)
                Status.Sending = !Status.Sending;
            _isSendingLoading = false;
        }
    }

    private async Task ChangeIntervalComfirm()
    {
        _isIntervalLoading = true;
        await systemControlService.ChangeSendingIntervalAsync((float)newInterval);
        Status.Interval = (float)newInterval;
        _isIntervalLoading = false;
    }
}
